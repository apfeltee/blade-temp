

def unshiftright(a, b)
{
    var na = a;
    var nb = b;
    if((nb >= 32) or (nb < (0-32)))
    {
        m = (nb / 32);
        nb = nb - (m * 32);
    }
    if(nb < 0)
    {
        nb = 32 + nb;
    }
    if (nb == 0)
    {
        return ((na >> 1) & 2147483647) * 2 + ((na >> nb) & 1);
    }
    if (na < 0) 
    { 
        na = (na >> 1); 
        na = na & 2147483647; 
        na = na | 1073741824; 
        na = (na >> (nb - 1)); 
    }
    else
    {
        na = (na >> nb); 
    }
    return na; 
}



var K_CHARSIZE   = 8;


def rol(num, cnt)
{
    return (num << cnt) | unshiftright(num, (32 - cnt));
}



def safe_add(x, y)
{
    if(x == nil)
    {
        x = 0;
    }
    if(y == nil)
    {
        y = 0;
    }
    var lsw = (x & 65535) + (y & 65535);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 65535);
}


def sha1_ft(t, b, c, d)
{
    if(t < 20)
    {
        return (b & c) | ((~b) & d);
    }
    if(t < 40)
    {
        return ((b ^ c) ^ d);
    }
    if(t < 60)
    {
        return (b & c) | (b & d) | (c & d);
    }
    return ((b ^ c) ^ d);
}



def sha1_kt(t)
{
    if(t < 20)
    {
        return 1518500249;
    }
    if(t < 40)
    {
        return 1859775393;
    }
    if(t < 60)
    {
        return -1894007588;
    }
    return -899497514;
}


def core_sha1(x, l)
{
    var aidx;
    
    aidx = (l >> 5);
    while((aidx+1) > x.length())
    {
        x.append(0);
    }
    x[aidx] = x[aidx] | 128 << (24 - l % 32);
    aidx = ((l + 64 >> 9) << 4) + 15;
    while((aidx+1) > x.length())
    {
        x.append(0);
    }
    x[aidx] = l;
    var w = [];
    var a =  1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d =  271733878;
    var e = -1009589776;
    var i = 0;
    while(i < x.length())
    {
        var olda = a;
        var oldb = b;
        var oldc = c;
        var oldd = d;
        var olde = e;
        var j = 0;
        while(j < 80)
        {
            if(j < 16)
            {
                var val = nil;
                while((j+1) > w.length())
                {
                    w.append(0);
                }
                if((i + j) < x.length())
                {
                    val = x[i + j];
                }
                w[j] = val;
            }
            else
            {
                var wv1 = w[j - 3];
                var wv2 = w[j - 8];
                var wv3 = w[j - 14];
                var wv4 = w[j - 16];
                if(wv1 == nil)
                {
                    wv1 = 0;
                }
                if(wv2 == nil)
                {
                    wv2 = 0;
                }
                if(wv3 == nil)
                {
                    wv3 = 0;
                }
                if(wv4 == nil)
                {
                    wv4 = 0;
                }
                if(j >= w.length())
                {
                    w.append(0);
                }
                w[j] = rol(((wv1 ^ wv2) ^ wv3) ^ wv4, 1);
            }
            var t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)), safe_add(safe_add(e, w[j]), sha1_kt(j)));
            e = d;
            d = c;
            c = rol(b, 30);
            b = a;
            a = t;
            j++;
        }
        a = safe_add(a, olda);
        b = safe_add(b, oldb);
        c = safe_add(c, oldc);
        d = safe_add(d, oldd);
        e = safe_add(e, olde);
        i = i + 16;
    }
    var rt = [a, b, c, d, e];
    
    return rt;
}



def str2binb(str)
{
    var aidx;
    var bin = [];
    var mask = (1 << K_CHARSIZE) - 1;
    var len = str.length();
    var i = 0;
    while(i < (len * K_CHARSIZE))
    {
        bin.append(0);
        i += K_CHARSIZE;
    }
    i = 0;
    while(i < len * K_CHARSIZE)
    {
        aidx = (i >> 5);
        /*if(bin[aidx] == nil)
        {
            bin[aidx] = 0
        }
        */
        if(aidx > bin.length())
        {
            bin[aidx] = 0;
        }
        bin[aidx] = bin[aidx] | (str.to_bytes()[i / K_CHARSIZE] & mask) << (24 - i%32); 
        i += K_CHARSIZE;
    }
    return bin;
}


def core_hmac_sha1(key, data)
{
    var bkey = str2binb(key);
    if(bkey.length() > 16)
    {
        bkey = core_sha1(bkey, key.length() * K_CHARSIZE);
    }
    var ipad = [];
    var opad = [];
    var i = 0;
    while(i < 16)
    {
        ipad[i] = bkey[i] ^ 909522486;
        opad[i] = bkey[i] ^ 1549556828;
        i++;
    }
    var hash = core_sha1(ipad + str2binb(data), 512 + data.length() * K_CHARSIZE);
    return core_sha1(opad + hash, 512 + 160);
}


def binb2hex(binarray)
{
    var hex_tab = "0123456789abcdef";
    var str = "";
    var i = 0;
    while(i < binarray.length() * 4)
    {
        var c1 = hex_tab[((binarray[i>>2] >> ((3 - i%4)*8+4)) & 15)];
        var c2 = hex_tab[((binarray[i>>2] >> ((3 - i%4)*8  )) & 15)];
        str += c1;
        str += c2;
        i++;
    }
    return str;
}



def hex_sha1(s)
{
    return binb2hex(core_sha1(str2binb(s), s.length() * K_CHARSIZE));
}

var demo = [
    ["foo", "0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33"],
    ["bar", "62cdb7020ff920e5aa642c3d4066950dd1f01f4d"],
    ["hello world", "2aae6c35c94fcfb415dbe95f408b9ce91ee846ed"],
    ["abcdx", "a96e144dfdc6380c8a4ae43bea1c81cb01215020"],
    ["long text, some spaces, blah blah", "fc0aa2379ecce86eac0dc50d921ab2cef7030d12"]
];
var idx=0;
while(idx<demo.length())
{
    var itm = demo[idx];
    idx++;
    var k = itm[0];
    var v = itm[1];
    var ma = hex_sha1(k);
    var m = ma;
    var okstr = "FAIL";
    if(m == v)
    {
        okstr = "OK  ";
    }
    print(okstr, ": \"",k, "\" => ", m, "\n");
}
