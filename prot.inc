/* builtins.c */
void bl_state_defineglobal(VMState *vm, ObjString *name, Value val);
bool bl_util_wrapprintfunc(VMState *vm, int argcount, Value *args, bool doreturn);
void bl_state_initbuiltinfunctions(VMState *vm);
void bl_state_initbuiltinmethods(VMState *vm);
/* class.c */
void bl_class_defhashtabfield(VMState *vm, ObjClass *klass, HashTable *tbl, ObjString *name, Object *objval);
void bl_class_defuserhashtabfield(VMState *vm, ObjClass *klass, HashTable *tbl, const char *name, Object *objval);
void bl_class_defnativemethod(VMState *vm, ObjClass *klass, const char *name, NativeCallbackFunc function);
void bl_class_defstaticnativemethod(VMState *vm, ObjClass *klass, const char *name, NativeCallbackFunc function);
/* debug.c */
void bl_blob_disassembleitem(BinaryBlob *blob, const char *name);
int bl_blob_disaspriminst(const char *name, int offset);
int bl_blob_disasconstinst(const char *name, BinaryBlob *blob, int offset);
int bl_blob_disasshortinst(const char *name, BinaryBlob *blob, int offset);
int bl_blob_disassembleinst(BinaryBlob *blob, int offset);
/* gcmem.c */
Object *bl_mem_gcprotect(VMState *vm, Object *object);
void bl_mem_gcclearprotect(VMState *vm);
void bl_mem_free(VMState *vm, void *pointer, size_t sz);
void *bl_mem_realloc(VMState *vm, void *pointer, size_t oldsize, size_t newsize);
void *bl_mem_growarray(VMState *vm, void *ptr, size_t tsz, size_t oldcount, size_t newcount);
void bl_mem_markobject(VMState *vm, Object *object);
void bl_mem_markvalue(VMState *vm, Value value);
void bl_mem_markarray(VMState *vm, ValArray *array);
void bl_mem_marktable(VMState *vm, HashTable *table);
void bl_mem_blackenobject(VMState *vm, Object *object);
void bl_mem_freeobject(VMState *vm, Object **pobject);
void bl_mem_freegcobjects(VMState *vm);
void bl_mem_collectgarbage(VMState *vm);
/* ktre.c */
void ktre_printnode(ktrecontext_t *re, ktrenode_t *n);
void ktre_printcomperror(ktrecontext_t *re);
ktrecontext_t *ktre_compile(const char *pat, int opt);
ktrecontext_t *ktre_copy(ktrecontext_t *re);
ktreinfo_t ktre_free(ktrecontext_t *re);
bool ktre_exec(ktrecontext_t *re, const char *subject, int ***vec);
bool ktre_match(const char *subject, const char *pat, int opt, int ***vec);
char *ktre_replace(const char *subject, const char *pat, const char *replacement, const char *indicator, int opt);
char *ktre_filter(ktrecontext_t *re, const char *subject, const char *replacement, const char *indicator);
char **ktre_split(ktrecontext_t *re, const char *subject, int *len);
int **ktre_getvec(const ktrecontext_t *re);
/* main.c */
void show_usage(char *argv[], bool fail);
int main(int argc, char *argv[]);
/* modarray.c */
ObjArray *bl_object_makelist(VMState *vm);
void bl_array_push(VMState *vm, ObjArray *list, Value value);
void array_free(void *data);
ObjPointer *new_array(VMState *vm, DynArray *array);
ObjArray *bl_array_copy(VMState *vm, ObjArray *list, int start, int length);
bool modfn_array_length(VMState *vm, int argcount, Value *args);
bool modfn_array_first(VMState *vm, int argcount, Value *args);
bool modfn_array_last(VMState *vm, int argcount, Value *args);
bool modfn_array_extend(VMState *vm, int argcount, Value *args);
bool modfn_array_tostring(VMState *vm, int argcount, Value *args);
bool modfn_array_itern_(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_array(VMState *vm);
void bl_state_initarraymethods(VMState *vm);
/* modbytes.c */
ObjBytes *bl_bytes_addbytes(VMState *vm, ObjBytes *a, ObjBytes *b);
void bl_state_initbytesmethods(VMState *vm);
/* moddict.c */
ObjDict *bl_object_makedict(VMState *vm);
ObjPointer *bl_dict_makeptr(VMState *vm, void *pointer);
void bl_dict_addentry(VMState *vm, ObjDict *dict, Value key, Value value);
bool bl_dict_getentry(ObjDict *dict, Value key, Value *value);
bool bl_dict_setentry(VMState *vm, ObjDict *dict, Value key, Value value);
void bl_state_initdictmethods(VMState *vm);
/* modfile.c */
bool cfn_file(VMState *vm, int argcount, Value *args);
void bl_state_initfilemethods(VMState *vm);
/* modmod.c */
ObjModule *bl_object_makemodule(VMState *vm, char *name, char *file);
/* modrange.c */
void bl_state_initrangemethods(VMState *vm);
/* modstring.c */
ObjString *bl_string_fromallocated(VMState *vm, char *chars, int length, uint32_t hash);
ObjString *bl_string_takestring(VMState *vm, char *chars, int length);
ObjString *bl_string_copystringlen(VMState *vm, const char *chars, int length);
ObjString *bl_string_copystring(VMState *vm, const char *chars);
void bl_state_initstringmethods(VMState *vm);
/* parser.c */
void bl_scanner_init(AstScanner *s, const char *source);
bool bl_scanner_isatend(AstScanner *s);
AstToken bl_scanner_skipblockcomments(AstScanner *s);
AstToken bl_scanner_skipwhitespace(AstScanner *s);
AstToken bl_scanner_scantoken(AstScanner *s);
ObjFunction *bl_compiler_compilesource(VMState *vm, ObjModule *module, const char *source, BinaryBlob *blob);
void bl_parser_markcompilerroots(VMState *vm);
/* util.c */
uint64_t pack754(long double f, unsigned bits, unsigned expbits);
long double unpack754(uint64_t i, unsigned bits, unsigned expbits);
double bl_util_uinttofloat(unsigned int val);
unsigned int bl_util_floattouint(double val);
int bl_util_doubletoint(double n);
int bl_util_numbertoint32(double n);
unsigned int bl_util_numbertouint32(double n);
int bl_util_utf8numbytes(int value);
char *bl_util_utf8encode(unsigned int code);
int bl_util_utf8decodenumbytes(uint8_t byte);
int bl_util_utf8decode(const uint8_t *bytes, uint32_t length);
char *bl_util_appendstring(char *old, const char *newstr);
int bl_util_utf8length(char *s);
char *bl_util_utf8index(char *s, int pos);
void bl_util_utf8slice(char *s, int *start, int *end);
char *bl_util_readhandle(FILE *hnd, size_t *dlen);
char *bl_util_readfile(const char *filename, size_t *dlen);
char *bl_util_getexepath(void);
char *bl_util_getexedir(void);
char *bl_util_mergepaths(const char *a, const char *b);
bool bl_util_fileexists(char *filepath);
char *bl_util_getbladefilename(const char *filename);
char *bl_util_resolveimportpath(char *modulename, const char *currentfile, bool isrelative);
char *bl_util_getrealfilename(char *path);
uint32_t bl_util_hashbits(uint64_t hash);
uint32_t bl_util_hashdouble(double value);
uint32_t bl_util_hashstring(const char *key, int length);
uint16_t bl_util_reverseint16(uint16_t arg);
uint32_t bl_util_reverseint32(uint32_t arg);
uint64_t bl_util_reverseint64(uint64_t arg);
void bl_util_copyfloat(int islittleendian, void *dst, float f);
void bl_util_copydouble(int islittleendian, void *dst, double d);
char *bl_util_ulongtobuffer(char *buf, long num);
float bl_util_parsefloat(int islittleendian, void *src);
double bl_util_parsedouble(int islittleendian, void *src);
/* value.c */
bool bl_object_isstdfile(ObjFile *file);
void bl_state_addmodule(VMState *vm, ObjModule *module);
bool bl_value_isstring(Value v);
bool bl_value_isnativefunction(Value v);
bool bl_value_isscriptfunction(Value v);
bool bl_value_isclosure(Value v);
bool bl_value_isclass(Value v);
bool bl_value_isinstance(Value v);
bool bl_value_isboundfunction(Value v);
bool bl_value_isnil(Value v);
bool bl_value_isbool(Value v);
bool bl_value_isnumber(Value v);
bool bl_value_isobject(Value v);
bool bl_value_isempty(Value v);
bool bl_value_ismodule(Value v);
bool bl_value_ispointer(Value v);
bool bl_value_isbytes(Value v);
bool bl_value_isarray(Value v);
bool bl_value_isdict(Value v);
bool bl_value_isfile(Value v);
bool bl_value_isrange(Value v);
void bl_value_printvalue(Value value);
void bl_value_echovalue(Value value);
char *bl_value_tostring(VMState *vm, Value value);
const char *bl_value_typename(Value value);
bool bl_value_valuesequal(Value a, Value b);
uint32_t bl_value_hashvalue(Value value);
void bl_value_sortbubblesort(Value *values, int count);
bool bl_value_isfalse(Value value);
Value bl_value_copyvalue(VMState *vm, Value value);
bool bl_value_returnvalue(VMState *vm, Value *args, Value val, bool b);
bool bl_value_returnempty(VMState *vm, Value *args);
bool bl_value_returnnil(VMState *vm, Value *args);
void bl_hashtable_reset(HashTable *table);
void bl_hashtable_init(HashTable *table);
void bl_hashtable_free(VMState *vm, HashTable *table);
void bl_hashtable_cleanfree(VMState *vm, HashTable *table);
bool bl_hashtable_get(HashTable *table, Value key, Value *value);
bool bl_hashtable_set(VMState *vm, HashTable *table, Value key, Value value);
bool bl_hashtable_delete(HashTable *table, Value key);
void bl_hashtable_addall(VMState *vm, HashTable *from, HashTable *to);
void bl_hashtable_copy(VMState *vm, HashTable *from, HashTable *to);
ObjString *bl_hashtable_findstring(HashTable *table, const char *chars, int length, uint32_t hash);
Value bl_hashtable_findkey(HashTable *table, Value value);
void bl_hashtable_print(HashTable *table);
void bl_hashtable_removewhites(VMState *vm, HashTable *table);
void bl_blob_init(BinaryBlob *blob);
void bl_blob_write(VMState *vm, BinaryBlob *blob, uint8_t byte, int line);
void bl_blob_free(VMState *vm, BinaryBlob *blob);
int bl_blob_addconst(VMState *vm, BinaryBlob *blob, Value value);
uint32_t bl_helper_objstringisregex(ObjString *string);
char *bl_helper_objstringremregexdelim(VMState *vm, ObjString *string);
void bl_valarray_init(ValArray *array);
void bl_bytearray_init(VMState *vm, ByteArray *array, int length);
void bl_valarray_push(VMState *vm, ValArray *array, Value value);
void bl_valarray_insert(VMState *vm, ValArray *array, Value value, int index);
void bl_valarray_free(VMState *vm, ValArray *array);
void bl_bytearray_free(VMState *vm, ByteArray *array);
Object *bl_object_allocobject(VMState *vm, size_t size, ObjType type);
ObjSwitch *bl_object_makeswitch(VMState *vm);
ObjBytes *bl_object_makebytes(VMState *vm, int length);
ObjRange *bl_object_makerange(VMState *vm, int lower, int upper);
ObjFile *bl_object_makefile(VMState *vm, ObjString *path, ObjString *mode);
ObjBoundMethod *bl_object_makeboundmethod(VMState *vm, Value receiver, ObjClosure *method);
ObjClass *bl_object_makeclass(VMState *vm, ObjString *name, ObjClass *superclass);
ObjFunction *bl_object_makescriptfunction(VMState *vm, ObjModule *module, FuncType type);
ObjInstance *bl_object_makeinstance(VMState *vm, ObjClass *klass);
ObjNativeFunction *bl_object_makenativefunction(VMState *vm, NativeCallbackFunc function, const char *name);
ObjClosure *bl_object_makeclosure(VMState *vm, ObjFunction *function);
ObjInstance *bl_object_makeexception(VMState *vm, ObjString *message);
ObjUpvalue *bl_object_makeupvalue(VMState *vm, Value *slot);
void bl_writer_printobject(Value value, bool fixstring);
ObjBytes *bl_bytes_copybytes(VMState *vm, unsigned char *b, int length);
ObjBytes *bl_bytes_takebytes(VMState *vm, unsigned char *b, int length);
char *bl_writer_objecttostring(VMState *vm, Value value);
const char *bl_object_gettype(Object *object);
bool load_module(VMState *vm, ModInitFunc init_fn, char *importname, char *source, void *handle);
void add_native_module(VMState *vm, ObjModule *module, const char *as);
void bind_user_modules(VMState *vm, char *pkgroot);
void bind_native_modules(VMState *vm);
const char *load_user_module(VMState *vm, const char *path, char *name);
void close_dl_module(void *handle);
bool bl_class_isinstanceof(ObjClass *klass1, char *klass2name);
bool modfn_math_sin(VMState *vm, int argcount, Value *args);
bool modfn_math_cos(VMState *vm, int argcount, Value *args);
bool modfn_math_tan(VMState *vm, int argcount, Value *args);
bool modfn_math_sinh(VMState *vm, int argcount, Value *args);
bool modfn_math_cosh(VMState *vm, int argcount, Value *args);
bool modfn_math_tanh(VMState *vm, int argcount, Value *args);
bool modfn_math_asin(VMState *vm, int argcount, Value *args);
bool modfn_math_acos(VMState *vm, int argcount, Value *args);
bool modfn_math_atan(VMState *vm, int argcount, Value *args);
bool modfn_math_atan2(VMState *vm, int argcount, Value *args);
bool modfn_math_asinh(VMState *vm, int argcount, Value *args);
bool modfn_math_acosh(VMState *vm, int argcount, Value *args);
bool modfn_math_atanh(VMState *vm, int argcount, Value *args);
bool modfn_math_exp(VMState *vm, int argcount, Value *args);
bool modfn_math_expm1(VMState *vm, int argcount, Value *args);
bool modfn_math_ceil(VMState *vm, int argcount, Value *args);
bool modfn_math_round(VMState *vm, int argcount, Value *args);
bool modfn_math_log(VMState *vm, int argcount, Value *args);
bool modfn_math_log10(VMState *vm, int argcount, Value *args);
bool modfn_math_log2(VMState *vm, int argcount, Value *args);
bool modfn_math_log1p(VMState *vm, int argcount, Value *args);
bool modfn_math_floor(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_math(VMState *vm);
bool modfn_os_exec(VMState *vm, int argcount, Value *args);
bool modfn_os_info(VMState *vm, int argcount, Value *args);
bool modfn_os_sleep(VMState *vm, int argcount, Value *args);
Value get_os_platform(VMState *vm);
Value get_blade_os_args(VMState *vm);
Value get_blade_os_path_separator(VMState *vm);
bool modfn_os_getenv(VMState *vm, int argcount, Value *args);
bool modfn_os_setenv(VMState *vm, int argcount, Value *args);
bool modfn_os_createdir(VMState *vm, int argcount, Value *args);
bool modfn_os_readdir(VMState *vm, int argcount, Value *args);
bool modfn_os_removedir(VMState *vm, int argcount, Value *args);
bool modfn_os_chmod(VMState *vm, int argcount, Value *args);
bool modfn_os_isdir(VMState *vm, int argcount, Value *args);
bool modfn_os_exit(VMState *vm, int argcount, Value *args);
bool modfn_os_cwd(VMState *vm, int argcount, Value *args);
bool modfn_os_realpath(VMState *vm, int argcount, Value *args);
bool modfn_os_chdir(VMState *vm, int argcount, Value *args);
bool modfn_os_exists(VMState *vm, int argcount, Value *args);
bool modfn_os_dirname(VMState *vm, int argcount, Value *args);
bool modfn_os_basename(VMState *vm, int argcount, Value *args);
Value modfield_os_dtunknown(VMState *vm);
Value modfield_os_dtreg(VMState *vm);
Value modfield_os_dtdir(VMState *vm);
Value modfield_os_dtfifo(VMState *vm);
Value modfield_os_dtsock(VMState *vm);
Value modfield_os_dtchr(VMState *vm);
Value modfield_os_dtblk(VMState *vm);
Value modfield_os_dtlnk(VMState *vm);
Value modfield_os_dtwht(VMState *vm);
void __os_module_preloader(VMState *vm);
RegModule *bl_modload_os(VMState *vm);
Value modfield_process_cpucount(VMState *vm);
void b__free_shared_memory(void *data);
bool modfn_process_process(VMState *vm, int argcount, Value *args);
bool modfn_process_create(VMState *vm, int argcount, Value *args);
bool modfn_process_isalive(VMState *vm, int argcount, Value *args);
bool modfn_process_kill(VMState *vm, int argcount, Value *args);
bool modfn_process_wait(VMState *vm, int argcount, Value *args);
bool modfn_process_id(VMState *vm, int argcount, Value *args);
bool modfn_process_newshared(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedwrite(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedread(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedlock(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedunlock(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_process(VMState *vm);
bool modfn_reflect_hasprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_setprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_delprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_hasmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_callmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_bindmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getboundmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_gettype(VMState *vm, int argcount, Value *args);
bool modfn_reflect_isptr(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getfunctionmetadata(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_reflect(VMState *vm);
bool modfn_struct_pack(VMState *vm, int argcount, Value *args);
bool modfn_struct_unpack(VMState *vm, int argcount, Value *args);
void modfn_struct_modulepreloader(VMState *vm);
RegModule *bl_modload_struct(VMState *vm);
bool bl_vm_propagateexception(VMState *vm, bool isassert);
bool bl_vm_pushexceptionhandler(VMState *vm, ObjClass *type, int address, int finallyaddress);
bool bl_vm_throwexception(VMState *vm, bool isassert, const char *format, ...);
void bl_vm_initexceptions(VMState *vm, ObjModule *module);
/* vm.c */
void bl_vm_pushvalue(VMState *vm, Value value);
Value bl_vm_popvalue(VMState *vm);
Value bl_vm_popvaluen(VMState *vm, int n);
Value bl_vm_peekvalue(VMState *vm, int distance);
void bl_vm_resetstack(VMState *vm);
void init_vm(VMState *vm);
void bl_vm_freevm(VMState *vm);
PtrResult bl_vm_interpsource(VMState *vm, ObjModule *module, const char *source);
void bl_vm_runtimeerror(VMState *vm, const char *format, ...);
FuncType bl_vmutil_getmethodtype(Value method);
Value bl_vm_getstacktrace(VMState *vm);
bool bl_vm_instanceinvokefromclass(VMState *vm, ObjClass *klass, ObjString *name, int argcount);
bool bl_vm_callvalue(VMState *vm, Value callee, int argcount);
PtrResult bl_vmdo_rungetproperty(VMState *vm, CallFrame *frame);
PtrResult bl_vm_run(VMState *vm);
