/* main.c */
int bl_util_utf8numbytes(int value);
char *bl_util_utf8encode(unsigned int code);
int bl_util_utf8decodenumbytes(uint8_t byte);
int bl_util_utf8decode(const uint8_t *bytes, uint32_t length);
char *bl_util_appendstring(char *old, char *newstr);
int bl_util_utf8length(char *s);
char *bl_util_utf8index(char *s, int pos);
void bl_util_utf8slice(char *s, int *start, int *end);
char *bl_util_readfile(const char *path);
char *bl_util_getexepath(void);
char *bl_util_getexedir(void);
char *bl_util_mergepaths(char *a, char *b);
bool bl_util_fileexists(char *filepath);
char *bl_util_getbladefilename(char *filename);
char *bl_util_resolveimportpath(char *modulename, const char *currentfile, bool isrelative);
char *bl_util_getrealfilename(char *path);
void bl_mem_free(VMState *vm, void *pointer, size_t sz);
void *bl_mem_realloc(VMState *vm, void *pointer, size_t oldsize, size_t newsize);
void *bl_mem_growarray(VMState *vm, void *ptr, size_t tsz, size_t oldcount, size_t newcount);
void mark_object(VMState *vm, Object *object);
void mark_value(VMState *vm, Value value);
void blacken_object(VMState *vm, Object *object);
void free_object(VMState *vm, Object **pobject);
void free_objects(VMState *vm);
void collect_garbage(VMState *vm);
void init_value_arr(ValArray *array);
void init_byte_arr(VMState *vm, ByteArray *array, int length);
void write_value_arr(VMState *vm, ValArray *array, Value value);
void insert_value_arr(VMState *vm, ValArray *array, Value value, int index);
void free_value_arr(VMState *vm, ValArray *array);
void free_byte_arr(VMState *vm, ByteArray *array);
void print_value(Value value);
void echo_value(Value value);
char *value_to_string(VMState *vm, Value value);
const char *value_type(Value value);
bool values_equal(Value a, Value b);
uint32_t hash_double(double value);
uint32_t hash_string(const char *key, int length);
uint32_t hash_value(Value value);
void sort_values(Value *values, int count);
bool is_false(Value value);
Value copy_value(VMState *vm, Value value);
void reset_table(HashTable *table);
void init_table(HashTable *table);
void free_table(VMState *vm, HashTable *table);
void clean_free_table(VMState *vm, HashTable *table);
bool table_get(HashTable *table, Value key, Value *value);
bool table_set(VMState *vm, HashTable *table, Value key, Value value);
bool table_delete(HashTable *table, Value key);
void table_add_all(VMState *vm, HashTable *from, HashTable *to);
void table_copy(VMState *vm, HashTable *from, HashTable *to);
ObjString *table_find_string(HashTable *table, const char *chars, int length, uint32_t hash);
Value table_find_key(HashTable *table, Value value);
void table_print(HashTable *table);
void mark_table(VMState *vm, HashTable *table);
void table_remove_whites(VMState *vm, HashTable *table);
void init_blob(BinaryBlob *blob);
void write_blob(VMState *vm, BinaryBlob *blob, uint8_t byte, int line);
void free_blob(VMState *vm, BinaryBlob *blob);
int add_constant(VMState *vm, BinaryBlob *blob, Value value);
uint32_t is_regex(ObjString *string);
char *remove_regex_delimiter(VMState *vm, ObjString *string);
void dict_add_entry(VMState *vm, ObjDict *dict, Value key, Value value);
bool dict_get_entry(ObjDict *dict, Value key, Value *value);
bool dict_set_entry(VMState *vm, ObjDict *dict, Value key, Value value);
Object *allocate_object(VMState *vm, size_t size, ObjType type);
ObjPointer *new_ptr(VMState *vm, void *pointer);
ObjModule *new_module(VMState *vm, char *name, char *file);
ObjSwitch *new_switch(VMState *vm);
ObjBytes *new_bytes(VMState *vm, int length);
ObjList *new_list(VMState *vm);
ObjRange *new_range(VMState *vm, int lower, int upper);
ObjDict *new_dict(VMState *vm);
ObjFile *new_file(VMState *vm, ObjString *path, ObjString *mode);
ObjBoundMethod *new_bound_method(VMState *vm, Value receiver, ObjClosure *method);
ObjClass *new_class(VMState *vm, ObjString *name);
ObjFunction *new_function(VMState *vm, ObjModule *module, FuncType type);
ObjInstance *new_instance(VMState *vm, ObjClass *klass);
ObjNativeFunction *new_native(VMState *vm, NativeCallbackFunc function, const char *name);
ObjClosure *new_closure(VMState *vm, ObjFunction *function);
ObjString *bl_string_fromallocated(VMState *vm, char *chars, int length, uint32_t hash);
ObjString *take_string(VMState *vm, char *chars, int length);
ObjString *copy_string(VMState *vm, const char *chars, int length);
ObjUpvalue *new_up_value(VMState *vm, Value *slot);
void print_object(Value value, bool fixstring);
ObjBytes *copy_bytes(VMState *vm, unsigned char *b, int length);
ObjBytes *take_bytes(VMState *vm, unsigned char *b, int length);
char *object_to_string(VMState *vm, Value value);
const char *object_type(Object *object);
bool bl_vmdo_dictgetindex(VMState *vm, ObjDict *dict, bool willassign);
void bl_vmdo_dictsetindex(VMState *vm, ObjDict *dict, Value index, Value value);
bool objfn_list_length(VMState *vm, int argcount, Value *args);
bool objfn_list_append(VMState *vm, int argcount, Value *args);
bool objfn_list_clear(VMState *vm, int argcount, Value *args);
bool objfn_list_clone(VMState *vm, int argcount, Value *args);
bool objfn_list_count(VMState *vm, int argcount, Value *args);
bool objfn_list_extend(VMState *vm, int argcount, Value *args);
bool objfn_list_indexof(VMState *vm, int argcount, Value *args);
bool objfn_list_insert(VMState *vm, int argcount, Value *args);
bool objfn_list_pop(VMState *vm, int argcount, Value *args);
bool objfn_list_shift(VMState *vm, int argcount, Value *args);
bool objfn_list_removeat(VMState *vm, int argcount, Value *args);
bool objfn_list_remove(VMState *vm, int argcount, Value *args);
bool objfn_list_reverse(VMState *vm, int argcount, Value *args);
bool objfn_list_sort(VMState *vm, int argcount, Value *args);
bool objfn_list_contains(VMState *vm, int argcount, Value *args);
bool objfn_list_delete(VMState *vm, int argcount, Value *args);
bool objfn_list_first(VMState *vm, int argcount, Value *args);
bool objfn_list_last(VMState *vm, int argcount, Value *args);
bool objfn_list_isempty(VMState *vm, int argcount, Value *args);
bool objfn_list_take(VMState *vm, int argcount, Value *args);
bool objfn_list_get(VMState *vm, int argcount, Value *args);
bool objfn_list_compact(VMState *vm, int argcount, Value *args);
bool objfn_list_unique(VMState *vm, int argcount, Value *args);
bool objfn_list_zip(VMState *vm, int argcount, Value *args);
bool objfn_list_todict(VMState *vm, int argcount, Value *args);
bool objfn_list_iter(VMState *vm, int argcount, Value *args);
bool objfn_list_itern(VMState *vm, int argcount, Value *args);
bool objfn_string_length(VMState *vm, int argcount, Value *args);
bool objfn_string_upper(VMState *vm, int argcount, Value *args);
bool objfn_string_lower(VMState *vm, int argcount, Value *args);
bool objfn_string_isalpha(VMState *vm, int argcount, Value *args);
bool objfn_string_isalnum(VMState *vm, int argcount, Value *args);
bool objfn_string_isnumber(VMState *vm, int argcount, Value *args);
bool objfn_string_islower(VMState *vm, int argcount, Value *args);
bool objfn_string_isupper(VMState *vm, int argcount, Value *args);
bool objfn_string_isspace(VMState *vm, int argcount, Value *args);
bool objfn_string_trim(VMState *vm, int argcount, Value *args);
bool objfn_string_ltrim(VMState *vm, int argcount, Value *args);
bool objfn_string_rtrim(VMState *vm, int argcount, Value *args);
bool objfn_string_join(VMState *vm, int argcount, Value *args);
bool objfn_string_split(VMState *vm, int argcount, Value *args);
bool objfn_string_indexof(VMState *vm, int argcount, Value *args);
bool objfn_string_startswith(VMState *vm, int argcount, Value *args);
bool objfn_string_endswith(VMState *vm, int argcount, Value *args);
bool objfn_string_count(VMState *vm, int argcount, Value *args);
bool objfn_string_tonumber(VMState *vm, int argcount, Value *args);
bool objfn_string_ascii(VMState *vm, int argcount, Value *args);
bool objfn_string_tolist(VMState *vm, int argcount, Value *args);
bool objfn_string_lpad(VMState *vm, int argcount, Value *args);
bool objfn_string_rpad(VMState *vm, int argcount, Value *args);
bool objfn_string_match(VMState *vm, int argcount, Value *args);
bool objfn_string_matches(VMState *vm, int argcount, Value *args);
bool objfn_string_replace(VMState *vm, int argcount, Value *args);
bool objfn_string_tobytes(VMState *vm, int argcount, Value *args);
bool objfn_string_iter(VMState *vm, int argcount, Value *args);
bool objfn_string_itern(VMState *vm, int argcount, Value *args);
bool cfn_bytes(VMState *vm, int argcount, Value *args);
bool objfn_bytes_length(VMState *vm, int argcount, Value *args);
bool objfn_bytes_append(VMState *vm, int argcount, Value *args);
bool objfn_bytes_clone(VMState *vm, int argcount, Value *args);
bool objfn_bytes_extend(VMState *vm, int argcount, Value *args);
bool objfn_bytes_pop(VMState *vm, int argcount, Value *args);
bool objfn_bytes_remove(VMState *vm, int argcount, Value *args);
bool objfn_bytes_reverse(VMState *vm, int argcount, Value *args);
bool objfn_bytes_split(VMState *vm, int argcount, Value *args);
bool objfn_bytes_first(VMState *vm, int argcount, Value *args);
bool objfn_bytes_last(VMState *vm, int argcount, Value *args);
bool objfn_bytes_get(VMState *vm, int argcount, Value *args);
bool objfn_bytes_isalpha(VMState *vm, int argcount, Value *args);
bool objfn_bytes_isalnum(VMState *vm, int argcount, Value *args);
bool objfn_bytes_isnumber(VMState *vm, int argcount, Value *args);
bool objfn_bytes_islower(VMState *vm, int argcount, Value *args);
bool objfn_bytes_isupper(VMState *vm, int argcount, Value *args);
bool objfn_bytes_isspace(VMState *vm, int argcount, Value *args);
bool objfn_bytes_dispose(VMState *vm, int argcount, Value *args);
bool objfn_bytes_tolist(VMState *vm, int argcount, Value *args);
bool objfn_bytes_tostring(VMState *vm, int argcount, Value *args);
bool objfn_bytes_iter(VMState *vm, int argcount, Value *args);
bool objfn_bytes_itern(VMState *vm, int argcount, Value *args);
bool objfn_dict_length(VMState *vm, int argcount, Value *args);
bool objfn_dict_add(VMState *vm, int argcount, Value *args);
bool objfn_dict_set(VMState *vm, int argcount, Value *args);
bool objfn_dict_clear(VMState *vm, int argcount, Value *args);
bool objfn_dict_clone(VMState *vm, int argcount, Value *args);
bool objfn_dict_compact(VMState *vm, int argcount, Value *args);
bool objfn_dict_contains(VMState *vm, int argcount, Value *args);
bool objfn_dict_extend(VMState *vm, int argcount, Value *args);
bool objfn_dict_get(VMState *vm, int argcount, Value *args);
bool objfn_dict_keys(VMState *vm, int argcount, Value *args);
bool objfn_dict_values(VMState *vm, int argcount, Value *args);
bool objfn_dict_remove(VMState *vm, int argcount, Value *args);
bool objfn_dict_isempty(VMState *vm, int argcount, Value *args);
bool objfn_dict_findkey(VMState *vm, int argcount, Value *args);
bool objfn_dict_tolist(VMState *vm, int argcount, Value *args);
bool objfn_dict_iter(VMState *vm, int argcount, Value *args);
bool objfn_dict_itern(VMState *vm, int argcount, Value *args);
void write_list(VMState *vm, ObjList *list, Value value);
ObjList *copy_list(VMState *vm, ObjList *list, int start, int length);
void bl_scanner_init(AstScanner *s, const char *source);
bool bl_scanner_isatend(AstScanner *s);
AstToken bl_scanner_skipblockcomments(AstScanner *s);
AstToken bl_scanner_skipwhitespace(AstScanner *s);
AstToken bl_scanner_scantoken(AstScanner *s);
ObjFunction *bl_compiler_compilesource(VMState *vm, ObjModule *module, const char *source, BinaryBlob *blob);
void mark_compiler_roots(VMState *vm);
void disassemble_blob(BinaryBlob *blob, const char *name);
int simple_instruction(const char *name, int offset);
int constant_instruction(const char *name, BinaryBlob *blob, int offset);
int short_instruction(const char *name, BinaryBlob *blob, int offset);
int disassemble_instruction(BinaryBlob *blob, int offset);
bool cfn_file(VMState *vm, int argcount, Value *args);
bool objfn_file_exists(VMState *vm, int argcount, Value *args);
bool objfn_file_close(VMState *vm, int argcount, Value *args);
bool objfn_file_open(VMState *vm, int argcount, Value *args);
bool objfn_file_isopen(VMState *vm, int argcount, Value *args);
bool objfn_file_isclosed(VMState *vm, int argcount, Value *args);
bool objfn_file_read(VMState *vm, int argcount, Value *args);
bool objfn_file_gets(VMState *vm, int argcount, Value *args);
bool objfn_file_write(VMState *vm, int argcount, Value *args);
bool objfn_file_puts(VMState *vm, int argcount, Value *args);
bool objfn_file_number(VMState *vm, int argcount, Value *args);
bool objfn_file_istty(VMState *vm, int argcount, Value *args);
bool objfn_file_flush(VMState *vm, int argcount, Value *args);
bool objfn_file_stats(VMState *vm, int argcount, Value *args);
bool objfn_file_symlink(VMState *vm, int argcount, Value *args);
bool objfn_file_delete(VMState *vm, int argcount, Value *args);
bool objfn_file_rename(VMState *vm, int argcount, Value *args);
bool objfn_file_path(VMState *vm, int argcount, Value *args);
bool objfn_file_mode(VMState *vm, int argcount, Value *args);
bool objfn_file_name(VMState *vm, int argcount, Value *args);
bool objfn_file_abspath(VMState *vm, int argcount, Value *args);
bool objfn_file_copy(VMState *vm, int argcount, Value *args);
bool objfn_file_truncate(VMState *vm, int argcount, Value *args);
bool objfn_file_chmod(VMState *vm, int argcount, Value *args);
bool objfn_file_settimes(VMState *vm, int argcount, Value *args);
bool objfn_file_seek(VMState *vm, int argcount, Value *args);
bool objfn_file_tell(VMState *vm, int argcount, Value *args);
bool load_module(VMState *vm, ModInitFunc init_fn, char *importname, char *source, void *handle);
void add_native_module(VMState *vm, ObjModule *module, const char *as);
void bind_user_modules(VMState *vm, char *pkgroot);
void bind_native_modules(VMState *vm);
char *load_user_module(VMState *vm, const char *path, char *name);
void close_dl_module(void *handle);
bool cfn_time(VMState *vm, int argcount, Value *args);
bool cfn_microtime(VMState *vm, int argcount, Value *args);
bool cfn_id(VMState *vm, int argcount, Value *args);
bool cfn_hasprop(VMState *vm, int argcount, Value *args);
bool cfn_getprop(VMState *vm, int argcount, Value *args);
bool cfn_setprop(VMState *vm, int argcount, Value *args);
bool cfn_delprop(VMState *vm, int argcount, Value *args);
bool cfn_max(VMState *vm, int argcount, Value *args);
bool cfn_min(VMState *vm, int argcount, Value *args);
bool cfn_sum(VMState *vm, int argcount, Value *args);
bool cfn_abs(VMState *vm, int argcount, Value *args);
bool cfn_int(VMState *vm, int argcount, Value *args);
bool cfn_bin(VMState *vm, int argcount, Value *args);
bool cfn_oct(VMState *vm, int argcount, Value *args);
bool cfn_hex(VMState *vm, int argcount, Value *args);
bool cfn_tobool(VMState *vm, int argcount, Value *args);
bool cfn_tostring(VMState *vm, int argcount, Value *args);
bool cfn_tonumber(VMState *vm, int argcount, Value *args);
bool cfn_toint(VMState *vm, int argcount, Value *args);
bool cfn_tolist(VMState *vm, int argcount, Value *args);
bool cfn_todict(VMState *vm, int argcount, Value *args);
bool cfn_chr(VMState *vm, int argcount, Value *args);
bool cfn_ord(VMState *vm, int argcount, Value *args);
bool cfn_rand(VMState *vm, int argcount, Value *args);
bool cfn_typeof(VMState *vm, int argcount, Value *args);
bool cfn_iscallable(VMState *vm, int argcount, Value *args);
bool cfn_isbool(VMState *vm, int argcount, Value *args);
bool cfn_isnumber(VMState *vm, int argcount, Value *args);
bool cfn_isint(VMState *vm, int argcount, Value *args);
bool cfn_isstring(VMState *vm, int argcount, Value *args);
bool cfn_isbytes(VMState *vm, int argcount, Value *args);
bool cfn_islist(VMState *vm, int argcount, Value *args);
bool cfn_isdict(VMState *vm, int argcount, Value *args);
bool cfn_isobject(VMState *vm, int argcount, Value *args);
bool cfn_isfunction(VMState *vm, int argcount, Value *args);
bool cfn_isiterable(VMState *vm, int argcount, Value *args);
bool cfn_isclass(VMState *vm, int argcount, Value *args);
bool cfn_isfile(VMState *vm, int argcount, Value *args);
bool cfn_isinstance(VMState *vm, int argcount, Value *args);
bool cfn_instanceof(VMState *vm, int argcount, Value *args);
bool cfn_print(VMState *vm, int argcount, Value *args);
bool objfn_range_lower(VMState *vm, int argcount, Value *args);
bool objfn_range_upper(VMState *vm, int argcount, Value *args);
bool objfn_range_iter(VMState *vm, int argcount, Value *args);
bool objfn_range_itern(VMState *vm, int argcount, Value *args);
void array_free(void *data);
ObjPointer *new_array(VMState *vm, DynArray *array);
DynArray *new_int16_array(VMState *vm, int length);
bool modfn_array_int16array(VMState *vm, int argcount, Value *args);
bool modfn_array_int16append(VMState *vm, int argcount, Value *args);
bool modfn_array_int16get(VMState *vm, int argcount, Value *args);
bool modfn_array_int16reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_int16clone(VMState *vm, int argcount, Value *args);
bool modfn_array_int16pop(VMState *vm, int argcount, Value *args);
bool modfn_array_int16remove(VMState *vm, int argcount, Value *args);
bool modfn_array_int16tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_int16tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_int16iter_(VMState *vm, int argcount, Value *args);
DynArray *new_int32_array(VMState *vm, int length);
bool modfn_array_int32array(VMState *vm, int argcount, Value *args);
bool modfn_array_int32append(VMState *vm, int argcount, Value *args);
bool modfn_array_int32get(VMState *vm, int argcount, Value *args);
bool modfn_array_int32reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_int32clone(VMState *vm, int argcount, Value *args);
bool modfn_array_int32pop(VMState *vm, int argcount, Value *args);
bool modfn_array_int32remove(VMState *vm, int argcount, Value *args);
bool modfn_array_int32tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_int32tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_int32iter_(VMState *vm, int argcount, Value *args);
DynArray *new_int64_array(VMState *vm, int length);
bool modfn_array_int64array(VMState *vm, int argcount, Value *args);
bool modfn_array_int64append(VMState *vm, int argcount, Value *args);
bool modfn_array_int64get(VMState *vm, int argcount, Value *args);
bool modfn_array_int64reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_int64clone(VMState *vm, int argcount, Value *args);
bool modfn_array_int64pop(VMState *vm, int argcount, Value *args);
bool modfn_array_int64remove(VMState *vm, int argcount, Value *args);
bool modfn_array_int64tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_int64tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_int64iter_(VMState *vm, int argcount, Value *args);
DynArray *new_uint16_array(VMState *vm, int length);
bool modfn_array_uint16array(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16append(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16get(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16clone(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16pop(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16remove(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_uint16iter_(VMState *vm, int argcount, Value *args);
DynArray *new_uint32_array(VMState *vm, int length);
bool modfn_array_uint32array(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32append(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32get(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32clone(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32pop(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32remove(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_uint32iter_(VMState *vm, int argcount, Value *args);
DynArray *new_uint64_array(VMState *vm, int length);
bool modfn_array_uint64array(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64append(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64get(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64reverse(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64clone(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64pop(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64remove(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64tolist(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64tobytes(VMState *vm, int argcount, Value *args);
bool modfn_array_uint64iter_(VMState *vm, int argcount, Value *args);
bool modfn_array_length(VMState *vm, int argcount, Value *args);
bool modfn_array_first(VMState *vm, int argcount, Value *args);
bool modfn_array_last(VMState *vm, int argcount, Value *args);
bool modfn_array_extend(VMState *vm, int argcount, Value *args);
bool modfn_array_tostring(VMState *vm, int argcount, Value *args);
bool modfn_array_itern_(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_array(VMState *vm);
bool modfn_io_mktime(VMState *vm, int argcount, Value *args);
bool modfn_io_localtime(VMState *vm, int argcount, Value *args);
bool modfn_io_gmtime(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_date(VMState *vm);
void disable_raw_mode(void);
int getch(void);
bool modfn_io_ttytcgetattr(VMState *vm, int argcount, Value *args);
bool modfn_io_ttytcsetattr(VMState *vm, int argcount, Value *args);
bool modfn_io_ttyexitraw(VMState *vm, int argcount, Value *args);
bool modfn_io_ttyflush(VMState *vm, int argcount, Value *args);
bool modfn_io_flush(VMState *vm, int argcount, Value *args);
bool modfn_io_getc(VMState *vm, int argcount, Value *args);
bool modfn_io_getch(VMState *vm, int argcount, Value *args);
bool modfn_io_putc(VMState *vm, int argcount, Value *args);
Value io_module_stdin(VMState *vm);
Value io_module_stdout(VMState *vm);
Value io_module_stderr(VMState *vm);
void modfn_io_unload(VMState *vm);
RegModule *bl_modload_io(VMState *vm);
bool modfn_math_sin(VMState *vm, int argcount, Value *args);
bool modfn_math_cos(VMState *vm, int argcount, Value *args);
bool modfn_math_tan(VMState *vm, int argcount, Value *args);
bool modfn_math_sinh(VMState *vm, int argcount, Value *args);
bool modfn_math_cosh(VMState *vm, int argcount, Value *args);
bool modfn_math_tanh(VMState *vm, int argcount, Value *args);
bool modfn_math_asin(VMState *vm, int argcount, Value *args);
bool modfn_math_acos(VMState *vm, int argcount, Value *args);
bool modfn_math_atan(VMState *vm, int argcount, Value *args);
bool modfn_math_atan2(VMState *vm, int argcount, Value *args);
bool modfn_math_asinh(VMState *vm, int argcount, Value *args);
bool modfn_math_acosh(VMState *vm, int argcount, Value *args);
bool modfn_math_atanh(VMState *vm, int argcount, Value *args);
bool modfn_math_exp(VMState *vm, int argcount, Value *args);
bool modfn_math_expm1(VMState *vm, int argcount, Value *args);
bool modfn_math_ceil(VMState *vm, int argcount, Value *args);
bool modfn_math_round(VMState *vm, int argcount, Value *args);
bool modfn_math_log(VMState *vm, int argcount, Value *args);
bool modfn_math_log10(VMState *vm, int argcount, Value *args);
bool modfn_math_log2(VMState *vm, int argcount, Value *args);
bool modfn_math_log1p(VMState *vm, int argcount, Value *args);
bool modfn_math_floor(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_math(VMState *vm);
bool modfn_os_exec(VMState *vm, int argcount, Value *args);
bool modfn_os_info(VMState *vm, int argcount, Value *args);
bool modfn_os_sleep(VMState *vm, int argcount, Value *args);
Value get_os_platform(VMState *vm);
Value get_blade_os_args(VMState *vm);
Value get_blade_os_path_separator(VMState *vm);
bool modfn_os_getenv(VMState *vm, int argcount, Value *args);
bool modfn_os_setenv(VMState *vm, int argcount, Value *args);
bool modfn_os_createdir(VMState *vm, int argcount, Value *args);
bool modfn_os_readdir(VMState *vm, int argcount, Value *args);
bool modfn_os_removedir(VMState *vm, int argcount, Value *args);
bool modfn_os_chmod(VMState *vm, int argcount, Value *args);
bool modfn_os_isdir(VMState *vm, int argcount, Value *args);
bool modfn_os_exit(VMState *vm, int argcount, Value *args);
bool modfn_os_cwd(VMState *vm, int argcount, Value *args);
bool modfn_os_realpath(VMState *vm, int argcount, Value *args);
bool modfn_os_chdir(VMState *vm, int argcount, Value *args);
bool modfn_os_exists(VMState *vm, int argcount, Value *args);
bool modfn_os_dirname(VMState *vm, int argcount, Value *args);
bool modfn_os_basename(VMState *vm, int argcount, Value *args);
Value modfield_os_dtunknown(VMState *vm);
Value modfield_os_dtreg(VMState *vm);
Value modfield_os_dtdir(VMState *vm);
Value modfield_os_dtfifo(VMState *vm);
Value modfield_os_dtsock(VMState *vm);
Value modfield_os_dtchr(VMState *vm);
Value modfield_os_dtblk(VMState *vm);
Value modfield_os_dtlnk(VMState *vm);
Value modfield_os_dtwht(VMState *vm);
void __os_module_preloader(VMState *vm);
RegModule *bl_modload_os(VMState *vm);
Value modfield_process_cpucount(VMState *vm);
void b__free_shared_memory(void *data);
bool modfn_process_process(VMState *vm, int argcount, Value *args);
bool modfn_process_create(VMState *vm, int argcount, Value *args);
bool modfn_process_isalive(VMState *vm, int argcount, Value *args);
bool modfn_process_kill(VMState *vm, int argcount, Value *args);
bool modfn_process_wait(VMState *vm, int argcount, Value *args);
bool modfn_process_id(VMState *vm, int argcount, Value *args);
bool modfn_process_newshared(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedwrite(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedread(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedlock(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedunlock(VMState *vm, int argcount, Value *args);
bool modfn_process_sharedislocked(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_process(VMState *vm);
bool modfn_reflect_hasprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_setprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_delprop(VMState *vm, int argcount, Value *args);
bool modfn_reflect_hasmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_callmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_bindmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getboundmethod(VMState *vm, int argcount, Value *args);
bool modfn_reflect_gettype(VMState *vm, int argcount, Value *args);
bool modfn_reflect_isptr(VMState *vm, int argcount, Value *args);
bool modfn_reflect_getfunctionmetadata(VMState *vm, int argcount, Value *args);
RegModule *bl_modload_reflect(VMState *vm);
bool modfn_struct_pack(VMState *vm, int argcount, Value *args);
bool modfn_struct_unpack(VMState *vm, int argcount, Value *args);
void __struct_module_preloader(VMState *vm);
RegModule *bl_modload_struct(VMState *vm);
bool bl_vm_propagateexception(VMState *vm, bool isassert);
bool bl_vm_pushexceptionhandler(VMState *vm, ObjClass *type, int address, int finallyaddress);
bool bl_vm_throwexception(VMState *vm, bool isassert, const char *format, ...);
ObjInstance *create_exception(VMState *vm, ObjString *message);
void bl_vm_runtimeerror(VMState *vm, const char *format, ...);
void push(VMState *vm, Value value);
Value pop(VMState *vm);
Value pop_n(VMState *vm, int n);
Value peek(VMState *vm, int distance);
void define_native_method(VMState *vm, HashTable *table, const char *name, NativeCallbackFunc function);
void init_vm(VMState *vm);
void free_vm(VMState *vm);
bool call_value(VMState *vm, Value callee, int argcount);
bool invoke_from_class(VMState *vm, ObjClass *klass, ObjString *name, int argcount);
bool bl_class_isinstanceof(ObjClass *klass1, char *klass2name);
PtrResult bl_vm_run(VMState *vm);
PtrResult bl_vm_interpsource(VMState *vm, ObjModule *module, const char *source);
void show_usage(char *argv[], bool fail);
int main(int argc, char *argv[]);
