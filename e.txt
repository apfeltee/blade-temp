Checking main.c ...
Checking main.c: BIT_ZERO_ON_LEFT...
main.c:18732:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:18738:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:18747:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:18864:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t slot = READ_SHORT();
                              ^
main.c:18870:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t slot = READ_SHORT();
                              ^
main.c:19164:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                    int index = READ_SHORT();
                              ^
main.c:19180:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int index = READ_SHORT();
                          ^
main.c:19186:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int index = READ_SHORT();
                          ^
main.c:19300:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int count = READ_SHORT();
                          ^
main.c:19697:34: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t address = READ_SHORT();
                                 ^
main.c:19698:42: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t finally_address = READ_SHORT();
                                         ^
main.c:8752:5: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
    p->current_class = &class_compiler;
    ^
main.c:5486:26: portability: Undefined behaviour, pointer arithmetic 'key+length' is out of bounds. [pointerOutOfBounds]
    const char* be = key + length;
                         ^
main.c:17126:12: note: Assignment 'sstr="Exception"', assigned value is "Exception"
    sstr = "Exception";
           ^
main.c:17127:18: note: Assignment 'slen=strlen(sstr)', assigned value is 9
    slen = strlen(sstr);
                 ^
main.c:17129:84: note: Calling function 'hash_string', 2nd argument 'slen' value is 9
    class_name = bl_string_fromallocated(vm, strdup(sstr), slen, hash_string(sstr, slen));
                                                                                   ^
main.c:5486:26: note: Pointer arithmetic overflow
    const char* be = key + length;
                         ^
main.c:15645:22: warning: The address of local variable 'as_long' might be accessed at non-zero index. [objectIndex]
        *output++ = v[map[i]];
                     ^
main.c:15641:22: note: Address of variable taken here.
    char* v = (char*)&as_long;
                     ^
main.c:15645:22: note: The address of local variable 'as_long' might be accessed at non-zero index.
        *output++ = v[map[i]];
                     ^
main.c:16989:26: error: Invalid calloc() argument nr 1. The value is 0 but the valid values are '1:'. [invalidFunctionArg]
    char* trace = calloc(0, sizeof(char));
                         ^
main.c:14519:34: warning: Comparison is wrong. Result of 'output+length' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour. [pointerAdditionResultNotNull]
            if((output + length) != NULL)
                                 ^
main.c:1851:29: warning: Either the condition 'b==NULL' is redundant or there is possible null pointer dereference: b. [nullPointerRedundantCheck]
    int len_b = (int)strlen(b);
                            ^
main.c:1852:10: note: Assuming that condition 'b==NULL' is not redundant
    if(b == NULL || len_b == 0)
         ^
main.c:1851:29: note: Null pointer dereference
    int len_b = (int)strlen(b);
                            ^
main.c:10375:31: warning: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
    size_t bytes_read = fread(buffer, sizeof(char), file_size, file->file);
                              ^
main.c:10383:15: note: Assuming that condition 'buffer!=NULL' is not redundant
    if(buffer != NULL)
              ^
main.c:10375:31: note: Null pointer dereference
    size_t bytes_read = fread(buffer, sizeof(char), file_size, file->file);
                              ^
main.c:10472:31: warning: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
    size_t bytes_read = fread(buffer, sizeof(char), length, file->file);
                              ^
main.c:10480:15: note: Assuming that condition 'buffer!=NULL' is not redundant
    if(buffer != NULL)
              ^
main.c:10472:31: note: Null pointer dereference
    size_t bytes_read = fread(buffer, sizeof(char), length, file->file);
                              ^
main.c:14859:5: style: Statements following return, break, continue, goto or throw will never be executed. [unreachableCode]
    RETURN;
    ^
main.c:17768:17: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
                break;
                ^
main.c:2430:13: style: The scope of the variable 'object' can be reduced. [variableScope]
    Object* object;
            ^
main.c:6667:12: style: The scope of the variable 'kwlen' can be reduced. [variableScope]
    size_t kwlen;
           ^
main.c:6668:12: style: The scope of the variable 'ofs' can be reduced. [variableScope]
    size_t ofs;
           ^
main.c:6669:17: style: The scope of the variable 'kwtext' can be reduced. [variableScope]
    const char* kwtext;
                ^
main.c:11049:11: style: The scope of the variable 'sdup' can be reduced. [variableScope]
    char* sdup;
          ^
main.c:11923:9: style: The scope of the variable 'x' can be reduced. [variableScope]
    int x;
        ^
main.c:14494:10: style: The scope of the variable 'buffer' can be reduced. [variableScope]
    char buffer[256];
         ^
main.c:14495:12: style: The scope of the variable 'n_read' can be reduced. [variableScope]
    size_t n_read;
           ^
main.c:14497:9: style: The scope of the variable 'length' can be reduced. [variableScope]
    int length = 0;
        ^
main.c:16321:14: style: The scope of the variable 'c' can be reduced. [variableScope]
        char c;
             ^
main.c:16538:37: style: Unsigned expression '--len' can't be negative so it is unnecessary to test it. [unsignedPositive]
                        while(--len >= 0)
                                    ^
main.c:16812:29: style: Checking if unsigned expression 'inputpos' is less than zero. [unsignedLessThanZero]
                if(inputpos < 0)
                            ^
main.c:12276:25: error: Expression 'vm,array->buffer,sizeof(int16_t)*array->length,sizeof(int16_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(int16_t, array->buffer, array->length, array->length++);
                        ^
main.c:12496:25: error: Expression 'vm,array->buffer,sizeof(int32_t)*array->length,sizeof(int32_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(int32_t, array->buffer, array->length, array->length++);
                        ^
main.c:12716:25: error: Expression 'vm,array->buffer,sizeof(int64_t)*array->length,sizeof(int64_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(int64_t, array->buffer, array->length, array->length++);
                        ^
main.c:12936:25: error: Expression 'vm,array->buffer,sizeof(uint16_t)*array->length,sizeof(uint16_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(uint16_t, array->buffer, array->length, array->length++);
                        ^
main.c:13156:25: error: Expression 'vm,array->buffer,sizeof(uint32_t)*array->length,sizeof(uint32_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(uint32_t, array->buffer, array->length, array->length++);
                        ^
main.c:13376:25: error: Expression 'vm,array->buffer,sizeof(uint64_t)*array->length,sizeof(uint64_t)*(array->length++)' depends on order of evaluation of side effects [unknownEvaluationOrder]
        array->buffer = GROW_ARRAY(uint64_t, array->buffer, array->length, array->length++);
                        ^
main.c:13584:21: portability: Behaviour of 'sizeof(void)' is not covered by the ISO C standard. [sizeofVoid]
    array->buffer = GROW_ARRAY(void, array->buffer, array->length, array->length + array2->length);
                    ^
main.c:13586:26: portability: 'array->buffer' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
    memcpy(array->buffer + array->length, array2->buffer, array2->length);
                         ^
main.c:1520:12: style: Unused variable: len [unusedVariable]
    size_t len;
           ^
main.c:2949:16: style: Variable 'length' is assigned a value that is never used. [unreadVariable]
    int length = 0;
               ^
Checking main.c: __BYTE_ORDER...
main.c:11170:0: style: The function 'bind_user_modules' is never used. [unusedFunction]

^
main.c:12372:0: style: The function 'modfn_array_int16remove' is never used. [unusedFunction]

^
main.c:12592:0: style: The function 'modfn_array_int32remove' is never used. [unusedFunction]

^
main.c:12812:0: style: The function 'modfn_array_int64remove' is never used. [unusedFunction]

^
main.c:13032:0: style: The function 'modfn_array_uint16remove' is never used. [unusedFunction]

^
main.c:13252:0: style: The function 'modfn_array_uint32remove' is never used. [unusedFunction]

^
main.c:13472:0: style: The function 'modfn_array_uint64remove' is never used. [unusedFunction]

^
main.c:15209:0: style: The function 'modfn_process_sharedislocked' is never used. [unusedFunction]

^
main.c:4393:0: style: The function 'table_print' is never used. [unusedFunction]

^
main.c:1648:0: style: The function 'utf8_decode_num_bytes' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

