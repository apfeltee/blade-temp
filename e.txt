Checking main.c ...
Checking main.c: BIT_ZERO_ON_LEFT...
main.c:16781:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:16787:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:16796:33: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t offset = READ_SHORT();
                                ^
main.c:16904:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t slot = READ_SHORT();
                              ^
main.c:16910:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t slot = READ_SHORT();
                              ^
main.c:17176:31: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                    int index = READ_SHORT();
                              ^
main.c:17190:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int index = READ_SHORT();
                          ^
main.c:17196:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int index = READ_SHORT();
                          ^
main.c:17306:27: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                int count = READ_SHORT();
                          ^
main.c:17672:34: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t address = READ_SHORT();
                                 ^
main.c:17673:41: portability: Assigning a pointer to an integer is not portable. [AssignmentAddressToInteger]
                uint16_t finallyaddress = READ_SHORT();
                                        ^
main.c:8077:5: error: Address of local auto-variable assigned to a function parameter. [autoVariables]
    p->currentclass = &classcompiler;
    ^
main.c:14102:22: warning: The address of local variable 'aslong' might be accessed at non-zero index. [objectIndex]
        *output++ = v[map[i]];
                     ^
main.c:14099:22: note: Address of variable taken here.
    char* v = (char*)&aslong;
                     ^
main.c:14102:22: note: The address of local variable 'aslong' might be accessed at non-zero index.
        *output++ = v[map[i]];
                     ^
main.c:15241:26: error: Invalid calloc() argument nr 1. The value is 0 but the valid values are '1:'. [invalidFunctionArg]
    char* trace = calloc(0, sizeof(char));
                         ^
main.c:13084:34: warning: Comparison is wrong. Result of 'output+length' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour. [pointerAdditionResultNotNull]
            if((output + length) != NULL)
                                 ^
main.c:1348:28: warning: Either the condition 'b==NULL' is redundant or there is possible null pointer dereference: b. [nullPointerRedundantCheck]
    int lenb = (int)strlen(b);
                           ^
main.c:1349:10: note: Assuming that condition 'b==NULL' is not redundant
    if(b == NULL || lenb == 0)
         ^
main.c:1348:28: note: Null pointer dereference
    int lenb = (int)strlen(b);
                           ^
main.c:9518:23: warning: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
    bytesread = fread(buffer, sizeof(char), filesize, file->file);
                      ^
main.c:9524:15: note: Assuming that condition 'buffer!=NULL' is not redundant
    if(buffer != NULL)
              ^
main.c:9518:23: note: Null pointer dereference
    bytesread = fread(buffer, sizeof(char), filesize, file->file);
                      ^
main.c:9605:23: warning: Either the condition 'buffer!=NULL' is redundant or there is possible null pointer dereference: buffer. [nullPointerRedundantCheck]
    bytesread = fread(buffer, sizeof(char), length, file->file);
                      ^
main.c:9611:15: note: Assuming that condition 'buffer!=NULL' is not redundant
    if(buffer != NULL)
              ^
main.c:9605:23: note: Null pointer dereference
    bytesread = fread(buffer, sizeof(char), length, file->file);
                      ^
main.c:15949:17: style: Consecutive return, break, continue, goto or throw statements are unnecessary. [duplicateBreak]
                break;
                ^
main.c:1120:11: style: The scope of the variable 'chars' can be reduced. [variableScope]
    char* chars;
          ^
main.c:2079:13: style: The scope of the variable 'object' can be reduced. [variableScope]
    Object* object;
            ^
main.c:2703:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:2835:9: style: The scope of the variable 'capacity' can be reduced. [variableScope]
    int capacity;
        ^
main.c:2876:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:2890:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:2904:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:2905:16: style: The scope of the variable 'string' can be reduced. [variableScope]
    ObjString* string;
               ^
main.c:2936:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:2975:16: style: The scope of the variable 'entry' can be reduced. [variableScope]
    HashEntry* entry;
               ^
main.c:6127:12: style: The scope of the variable 'kwlen' can be reduced. [variableScope]
    size_t kwlen;
           ^
main.c:6128:12: style: The scope of the variable 'ofs' can be reduced. [variableScope]
    size_t ofs;
           ^
main.c:6129:17: style: The scope of the variable 'kwtext' can be reduced. [variableScope]
    const char* kwtext;
                ^
main.c:9542:10: style: The scope of the variable 'end' can be reduced. [variableScope]
    long end;
         ^
main.c:9543:10: style: The scope of the variable 'currentpos' can be reduced. [variableScope]
    long currentpos;
         ^
main.c:10115:11: style: The scope of the variable 'sdup' can be reduced. [variableScope]
    char* sdup;
          ^
main.c:10219:12: style: The scope of the variable 'dlen' can be reduced. [variableScope]
    size_t dlen;
           ^
main.c:10220:9: style: The scope of the variable 'extlength' can be reduced. [variableScope]
    int extlength;
        ^
main.c:10221:9: style: The scope of the variable 'pathlength' can be reduced. [variableScope]
    int pathlength;
        ^
main.c:10222:9: style: The scope of the variable 'namelength' can be reduced. [variableScope]
    int namelength;
        ^
main.c:10223:11: style: The scope of the variable 'dnam' can be reduced. [variableScope]
    char* dnam;
          ^
main.c:10224:11: style: The scope of the variable 'path' can be reduced. [variableScope]
    char* path;
          ^
main.c:10225:11: style: The scope of the variable 'name' can be reduced. [variableScope]
    char* name;
          ^
main.c:10226:11: style: The scope of the variable 'error' can be reduced. [variableScope]
    char* error;
          ^
main.c:10227:11: style: The scope of the variable 'filename' can be reduced. [variableScope]
    char* filename;
          ^
main.c:10911:9: style: The scope of the variable 'x' can be reduced. [variableScope]
    int x;
        ^
main.c:13060:10: style: The scope of the variable 'buffer' can be reduced. [variableScope]
    char buffer[256];
         ^
main.c:13061:12: style: The scope of the variable 'nread' can be reduced. [variableScope]
    size_t nread;
           ^
main.c:13063:9: style: The scope of the variable 'length' can be reduced. [variableScope]
    int length = 0;
        ^
main.c:14583:9: style: The scope of the variable 'size' can be reduced. [variableScope]
    int size;
        ^
main.c:14584:9: style: The scope of the variable 'argb' can be reduced. [variableScope]
    int argb;
        ^
main.c:14586:9: style: The scope of the variable 'namelen' can be reduced. [variableScope]
    int namelen;
        ^
main.c:14587:9: style: The scope of the variable 'repetitions' can be reduced. [variableScope]
    int repetitions;
        ^
main.c:14591:10: style: The scope of the variable 'type' can be reduced. [variableScope]
    char type;
         ^
main.c:14593:11: style: The scope of the variable 'name' can be reduced. [variableScope]
    char* name;
          ^
main.c:12214:26: portability: 'array->buffer' is of type 'void *'. When using void pointers in calculations, the behaviour is undefined. [arithOperationsOnVoidPointer]
    memcpy(array->buffer + array->length, array2->buffer, array2->length);
                         ^
Checking main.c: __BYTE_ORDER...
main.c:10217:0: style: The function 'bind_user_modules' is never used. [unusedFunction]

^
main.c:2951:0: style: The function 'bl_hashtable_print' is never used. [unusedFunction]

^
main.c:1172:0: style: The function 'bl_util_utf8decodenumbytes' is never used. [unusedFunction]

^
main.c:11325:0: style: The function 'modfn_array_int16remove' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

